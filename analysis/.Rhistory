exp(1)/1+exp(1)
logit2prop <- function(l){exp(l)/(1+exp(l))}
logit2(2.3)
logit2prop =  function(l){exp(l)/(1+exp(l))}
logit2prop(23.3)
logit2prop(.3)
logit2prop(1)
logit2prop(1)
fit.dmmR@response
fit.dmmR@conMat
fit.dmmR@transition
summary(fit.dmmR)
viterbi
?viterbi
?mlogit
fit.dmmR@dens
nrow(fit.dmmR@den)
nrow(fit.dmmR@dens)
names(fit.dmmR@dens)
fit.dmmR@trDens
help(fit.dmmR@trDens)
source('betting-sequence-model.R')
responseinits_filter
summary(fit.dmmR)
fit.dmmR@response
summary(fit.dmmR)
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
responseinitsfinal
source('betting-sequence-model.R')
responseinitsfinal
getpars(fit.dmmR)
source('betting-sequence-model.R')
pars[1:2]
pars[3:6]
?multinomial
source('betting-sequence-model.R')
library(depmixS4)
unlist(depmixS4)
library(depmixS4)
unlink(depmixS4)
detach("package:depmixS4", unload=TRUE)
library(depmixS4)
detach_package <- function(pkg, character.only = FALSE)
{
  if(!character.only)
  {
    pkg <- deparse(substitute(pkg))
  }
  search_item <- paste("package", pkg, sep = ":")
  while(search_item %in% search())
  {
    detach(search_item, unload = TRUE, character.only = TRUE)
  }
}
detach_package("depmixS4", TRUE)
library(depmixS4)
source('betting-sequence-model.R')
detach_package("depmixS4", TRUE)
library(depmixS4)
source('betting-sequence-model.R')
source('betting-sequence-model.R')
c(unlist(lapply(responseinits_filter, helper)))
a = runif(28*3)
b = c(unlist(lapply(responseinits_filter, helper)))
aa
a
b
length(a)
length(b)
names(b)
names(a)
names(b) = NULL
b
a
source('betting-sequence-model.R')
source('betting-sequence-model.R')
responseinitsfinal
responseinits
responseinits_filter
responseinitsfinal
source('betting-sequence-model.R')
detach_package("depmixS4", TRUE)
library(depmixS4)
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
fit.dmmR@response
print("hello", "world")
a
a = c(1,2,3)
print(paste(a, "hello", "world"))
print(a)
paste(a)
print(paste(a), paste("hello", "world"))
paste("hello", a)
source('betting-sequence-model.R')
length(responseinitsfinal)
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
detach_package("depmixS4", TRUE)
library(depmixS4)
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
detach_package("depmixS4", TRUE)
library(depmixS4)
reload = function() { detach_package("depmixS4", TRUE); library(depmixS4) } 
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
source('betting-sequence-model.R')
fit.dmmR.op = fit(dmmR.op)
any(is.na(pdatasampled))
any(is.na(pdata))
source('betting-sequence-model.R')
fit.dmmR.op = fit(dmmR.op)
source('betting-sequence-model.R')
ls()
rm(dmmR2)
source('betting-sequence-model.R')
ls()
rm(dmmR.op)
source('betting-sequence-model.R')
fit.dmmR.op = fit(dmmR.op)
responseinitsfinal
source('betting-sequence-model.R')
responseinits
responseinitsfinal
28*2
56+6
length(responseinits)
28*3
responseinitsfinal
length(responseinitsfinal)
length(filter)
filter
responseinits_filter
length(responseinits_filter)
responseinits
length(responseinits)
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
source('betting-sequence-model.R')
fit.dmmR.op = fit(dmmR.op)
save.image()
responseinits
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
Sys.sleep(100)
?Sys.sleep
Sys.sleep(.1)
Sys.sleep(.2)
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
reload()
source('betting-sequence-model.R')
source('betting-sequence-model.R')
ls()
fit.dmmR
fit.dmmR@response
fit.dmmR@dens
head(fit.dmmR@dens)
dime(fit.dmmR@dens)
dims(fit.dmmR@dens)
dim(fit.dmmR@dens)
dim(fit.dmmR@dens[1])
fit.dmmR@dens[1]
fit.dmmR@dens[2]
fit.dmmR@dens[1:6]
sum(fit.dmmR@dens[1:6])
sum(fit.dmmR@dens[6:12])
sum(fit.dmmR@dens[7:12])
sum(fit.dmmR@dens[13:18])
source('betting-sequence-model.R')
rm(pdataAK)
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
reload)(
reload()
source('betting-sequence-model.R')
ls()
rm(pdataAK)
source('betting-sequence-model.R')
head(pdataAK)
length(pdataAK)
pdataAK
nrow(pdataAK)
unique(pdataAK$V2)
ls()
rm(pdataAK)
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
source('betting-sequence-model.R')
dmm = depmix(list(V5~1, V6~1, V8~1)
, data=temp_ordered
, nstates=1
, ntimes=iseq[,3]
, family = list(multinomial(), multinomial(), multinomial()))
dmm = depmix(list(V5~1, V6~1, V8~1)
, data=temp_ordered
, nstates=1
, ntimes=iseq[,3]
, family = list(multinomial(), multinomial(), multinomial()))
temp = pdata[pdata$V2 %in% hand_list, ]
# Aggregate counts so we know what actions are part of an independant series
# We don't want the model to treat this as a single time series because each new hand play is independant
iseq = aggregate(V2 ~ V1 + V4, temp, length)
iseq = iseq[order(iseq$V1, iseq$V4), ]
# Ensure the data is ordered properly by handid, playerid, and actionnumber
temp_ordered = temp[order(temp$V1, temp$V4, temp$V7), ]
hand_list=c('AKo')
temp = pdata[pdata$V2 %in% hand_list, ]
# Aggregate counts so we know what actions are part of an independant series
# We don't want the model to treat this as a single time series because each new hand play is independant
iseq = aggregate(V2 ~ V1 + V4, temp, length)
iseq = iseq[order(iseq$V1, iseq$V4), ]
# Ensure the data is ordered properly by handid, playerid, and actionnumber
temp_ordered = temp[order(temp$V1, temp$V4, temp$V7), ]
dmm = depmix(list(V5~1, V6~1, V8~1)
, data=temp_ordered
, nstates=1
, ntimes=iseq[,3]
, family = list(multinomial(), multinomial(), multinomial()))
fit.dmm = fit(dmm)
dmm
dmm = depmix(list(V5~1, V6~1, V8~1)
, data=temp_ordered
, nstates=1
, ntimes=iseq[,3]
, family = list(multinomial("identity"), multinomial("identity"), multinomial("identity")))
fit.dmm = fit(dmm)
getpars(dmm)
getpars(dmm)
fit.dmm = fit(dmm)
ls()
dmm = depmix(list(V5~1, V6~1, V8~1), data=temp_ordered, nstates=2, ntimes=iseq[,3], family = list(multino\
mial("identity"), multinomial("identity"), multinomial("identity")))
dmm = depmix(list(V5~1, V6~1, V8~1), data=temp_ordered, nstates=2, ntimes=iseq[,3], family = list(multino\
dmm = depmix(list(V5~1, V6~1, V8~1), data=temp_ordered, nstates=2, ntimes=iseq[,3], family = list(multino 
mial("identity"), multinomial("identity"), multinomial("identity")))
dmm = depmix(list(V5~1, V6~1, V8~1)
, data=temp_ordered
, nstates=2
, ntimes=iseq[,3]
, family = list(multinomial("identity"), multinomial("identity"), multinomial("identity")))
head(temp_ordered)
dmm = depmix(list(V5~1, V6~1, V8~1)
, data=temp_ordered
, nstates=2
, ntimes=iseq[,3]
, family = list(multinomial(), multinomial(), multinomial()))
fit.dmm = fit(dmm)
dmm1 = depmix(list(V5~1, V6~1, V8~1)
, data=temp_ordered
, nstates=1
, ntimes=iseq[,3]
, family = list(multinomial(), multinomial(), multinomial()))
fit.dmm1 = fit(dmm1)
dmm1 = depmix(list(V5~1, V6~1, V8~1)
, data=temp_ordered
, nstates=2
, ntimes=iseq[,3]
, family = list(multinomial(), multinomial(), multinomial()))
dmm2 = depmix(list(V5~1, V6~1, V8~1)
, data=temp_ordered
, nstates=2
, ntimes=iseq[,3]
, family = list(multinomial(), multinomial(), multinomial()))
fit.dmm2 = fit(dmm2)
head(fit.dmm2@posterior)
eval.fit = cbind(temp_ordered, fit.dmm2@posterior)
head(eval.fit)
aggregate(V1 ~ state + V2)
aggregate(eval.fit, V1 ~ state + V2, length)
aggregate(V1 ~ state + V2, eval.fit, length)
fit.dmm2@response
fit.dmm2@transition
getpars(getmodel(fit.dmm2, state=1))
fit.dmm2@response
length(getpars(getmodel(fit.dmm2, state=1)))
length(getpars(getmodel(fit.dmm2, state=1, number=1)))
length(getpars(getmodel(fit.dmm2, state=1, number=2)))
length(getpars(getmodel(fit.dmm2, state=1, number=3)))
length(getpars(getmodel(fit.dmm2, state=1, number=4)))
getpars(fit.dmm2)
fit.dmm2@transition
fit.dmm2@trDens
pars = getpars(fit.dmm2)
head(pdatasampled)
responseinits = pars[7:npar(fit.dmm2)]
responseinits
flags = c(unlist(getpars(fit.dmm2, "fixed")))
flags
pars
7+14
flags = c(unlist(getpars(fit.dmmR2, "fixed")))
responseinitsfinal = c(rep(0,6), pars[7:21], rep(0, 14))
length(responseinitsfinal) == length(pars)
length(responseinitsfinal)
length(pars)
responseinitsfinal = c(rep(0,6), pars[7:21], rep(0, 13))
responseinitsfinal
responseinitsfinal = c(rep(0,6), pars[7:20], rep(0, 14))
responseinitsfinal
length(pars)
length(responseinitsfinal)
pars[3:6]
pars[1:2]
fit.dmm2@transition
fit.dmm2@trDens
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal, trstart=pars[3:6], instart=pars[1:2], family=list(multinomial(), multinomial(), multinomial()))
getpars(fit.dmm2)
length(getpars(fit.dmm2))
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal[7:], trstart=pars[3:6], instart=pars[1:2], family=list(multinomial(), multinomial(), multinomial()))
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal[7:28], trstart=pars[3:6], instart=pars[1:2], family=list(multinomial(), multinomial(), multinomial()))
responseinitsfinal[7:length(responseinitsfinal)]
length(responseinitsfinal[7:length(responseinitsfinal)])
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal[7:length(responseinitsfinal)], trstart=pars[3:6], instart=pars[1:2], family=list(multinomial(), multinomial(), multinomial()))
responseinitsfinal
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal[7:length(responseinitsfinal)], trstart=c(1,0,0,1), instart=c(.5, .5), family=list(multinomial(), multinomial(), multinomial()))
responseinitsfinal = c(runif(6), pars[7:20], runif(14))
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal[7:length(responseinitsfinal)], trstart=c(1,0,0,1), instart=c(.5, .5), family=list(multinomial(), multinomial(), multinomial()))
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal[7:length(responseinitsfinal)], trstart=c(1,0,.5,.5), instart=c(.5, .5), family=list(multinomial(), multinomial(), multinomial()))
responseinitsfinal
responseinitsfinal[7:length(responseinitsfinal)]
responseinitsfinal = responseinitsfinal[7:length(responseinitsfinal)]
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal, trstart=c(1,0,.5,.5), instart=c(.5, .5), family=list(multinomial(), multinomial(), multinomial()))
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=abs(responseinitsfinal), trstart=c(1,0,.5,.5), instart=c(.5, .5), family=list(multinomial(), multinomial(), multinomial()))
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=abs(responseinitsfinal), trstart=c(1,0,.5,.5), instart=c(.5, .5), family=list(multinomial(), multinomial(), multinomial()))
responseinits
replace(0.0, responseinitsfinal, 1.0)
responseinits[1]
responseinits[1] = 1.0
responseinits[1]
responseinitsfinal[1]
responseinitsfinal[1] = 1.0
responseinitsfinal
responseinitsfinal[8] = 1.0
responseinitsfinal[12] = 1.0
responseinitsfinal
abs(responseinitsfinal)
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=abs(responseinitsfinal), trstart=c(1,0,.5,.5), instart=c(.5, .5), family=list(multinomial(), multinomial(), multinomial()))
responseinitsfinal
responseinits
responseinits[1] = 0.0
responseinits
responseinitsfinal = responseinits[7:length(responseinits)]
length(responseinitsfinal)
responseinits = pars[7:npar(fit.dmm2)]
responseinits
responseinits
length(responseinits)
exp(responseinits) / 1+exp(responseinits)
responseinitsfinal = exp(responseinits) / 1+exp(responseinits)
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal, trstart=c(1,0,.5,.5), instart=c(.5, .5), family=list(multinomial(), multinomial(), multinomial()))
fit.dmm2.op = fit(dmm2.op)
eval.dmm2.op = cbind(pdatasampled, fit.dmm2.op@posterior)
head(eval.dmm2.op
)
aggregate(V1 ~ state + V2, eval.dmm2.op, length)
save.image()
savehistory()
getwd()
save.image()
aggregate(. ~ state + V2, eval.dmm2.op, length)
aggregate(~ state + V2, eval.dmm2.op, length)
aggregate(V1 ~ state + V2, eval.dmm2.op, length)
getpars(dmm2.op)
responseinits
length(responseinits)
length(responseinits[1:14])
fit.dmm2.op = fit(dmm2.op, equal = c(rep(1, 6), responseinits[1:14], rep(1,14)))
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal, trstart=c(1,0,.5,.5), instart=c(.1, .9), family=list(multinomial(), multinomial(), multinomial()))
fit.dmm2.op = fit(dmm2.op, equal = c(rep(1, 6), responseinits[1:14], rep(1,14)))
fit.dmm2.op = fit(dmm2.op, equal = c(rep(1, 6), rep(c(0,1), 7), rep(1,14)))
fit.dmm2.op = fit(dmm2.op, equal = c(rep(1, 6), rep(c(0,1), 7), rep(1,14)))
fit.dmm2.op = fit(dmm2.op)
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal, trstart=c(.9,.1,.5,.5), instart=c(.3, .7), family=list(multinomial(), multinomial(), multinomial()))
fit.dmm2.op = fit(dmm2.op)
eval.dmm2.op = cbind(pdatasampled, fit.dmm2.op@posterior)
aggregate(V1 ~ state + V2, eval.dmm2.op, length)
fit.dmm2@trDens
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal, trstart=c(.5,.5,.5,.5), instart=c(.5, .5), family=list(multinomial(), multinomial(), multinomial()))
fit.dmm2.op = fit(dmm2.op)
fit.dmm2.op = fit(dmm2.op)
eval.dmm2.op = cbind(pdatasampled, fit.dmm2.op@posterior)
aggregate(V1 ~ state + V2, eval.dmm2.op, length)
getpars(fit.dmm2.op)
fit.dmm2.op@response
tail(getpars(fit.dmm2.op))
tail(getpars(fit.dmm2.op), n=14)
fit.dmm2.op@response
tail(getpars(fit.dmm2.op), n=14)
responseinitsfinal
responseinits
responseinitsfinal[15:28]
responseinitsfinal[15:28] = runif(14)
responseinitsfinal
dmm2.op = depmix(list(V5~1, V6~1, V8~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal, trstart=pars[3:6], instart=pars[1:2], family=list(multinomial(), multinomial(), multinomial()))
fit.dmm2.op = fit(dmm2.op)
head(pdatasampled)
dmm2.op = depmix(list(V5~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal, trstart=pars[3:6], instart=pars[1:2], transition = ~V6 + V8, family=list(multinomial(), multinomial(), multinomial()))
dmm2.op = depmix(list(V5~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal, trstart=pars[3:6], instart=pars[1:2], transition = ~V6 + V8, family=list(multinomial()))
pdataAK
AK
dmm2.op = depmix(list(V5~1), data=pdatasampled, nstates=2, respstart=responseinitsfinal[1:14], trstart=pars[3:6], instart=pars[1:2], transition = ~V6 + V8, family=list(multinomial()))
dmm2.op = depmix(list(V5~1), data=pdatasampled, nstates=2, transition = ~V6 + V8, family=list(multinomial()))
fit.dmm2.op = fit(dmm2.op)
eval.dmm2.op = cbind(pdatasampled, fit.dmm2.op@posterior)
aggregate(V1 ~ state + V2, eval.dmm2.op, length)
head(pdata_sample)
source('betting-sequence-model.R')
AK = sthmm(hand_list=c('AKo'))
AKss = sthmm(hand_list=c('AKo'), model=list(V5~1, V6~1, V8~1), numstates=1, fam=list(rep(multinomial("identity"), 3)))
rep(multinomial(), 3)
AKss = sthmm(hand_list=c('AKo'), model=list(V5~1, V6~1, V8~1), numstates=1, fam=list(multinomial("identity"), multinomial("identity"), multinomial("identity")))
AK
names(AK)
source('betting-sequence-model.R')
AK = sthmm(hand_list=c('AKo'))
names(AK)
source('betting-sequence-model.R')
AK = sthmm(hand_list=c('AKo'))
AK[4]
names(AK)
source('betting-sequence-model.R')
AK = sthmm(hand_list=c('AKo'))
names(AK)
AK$eval.matrix
head(temp_ordered)
rm(temp_ordered)
head(temp)
rm(temp)
ls()
AK = sthmm(hand_list=c('AKo'))
names(AK)
AK = sthmm(hand_list=c('AKo'))
source("betting-sequence-model.R")
AK$eval.matrix
head(AK$eval.dataset)
unique(AK$eval.dataset$V2)
source("betting-sequence-model.R")
AK = sthmm(hand_list=c('AKo'))
AK$
eval.matrix
AK$fit.dmm@response
summary(fit.dmmR2)
summary(AK$fit.dmm)
summary(AK$fit.dmm@response)
AK$fit.dmm@response
AK$fit.dmm@response[1]
getpars(getmodel(AK$fit.dmm@reponse, state=1, number=1))
getpars(getmodel(AK$fit.dmm, state=1, number=1))
getpars(getmodel(AK$fit.dmm, state=1, number=2))
getpars(getmodel(AK$fit.dmm, state=1, number=3))
unique(AK$eval.dataset$V5)
unique(AK$eval.dataset$V6)
unique(AK$eval.dataset$V8)
getpars(AK$fit.dmm)
getpars(AK$fit.dmm)[7:14]
getpars(AK$fit.dmm)[7:21]
getpars(AK$fit.dmm)[7:20]
getpars(fit.dmmR2)
getpars(fit.dmmR)
AKr = sthmm(hand_list=c('AKo'), model=list(V2~V5, V2~V6, V2~V8), numstates=2, fam=list(multinomial(), multinomial(), multinomial()))
AKr = sthmm(hand_list=c('AKo', '27o'), model=list(V2~V5, V2~V6, V2~V8), numstates=2, fam=list(multinomial(), multinomial(), multinomial()))
AKr$eval.matrix
unique(pdata$V2)
AKr = sthmm(hand_list=c('AKo', '27o', '55o', '5Ao'), model=list(V2~V5, V2~V6, V2~V8), numstates=2, fam=list(multinomial(), multinomial(), multinomial()))
AKr$eval.matrix
save.image()
savehistory()
